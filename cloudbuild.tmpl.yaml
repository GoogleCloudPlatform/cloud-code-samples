steps:
- id: 'create namespace'
  name: 'gcr.io/cloud-builders/kubectl'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    kubectl config view
    gcloud container clusters get-credentials $$CLOUDSDK_CONTAINER_CLUSTER
    kubectl config view
    kubectl create namespace $$TEST_NAMESPACE

- id: 'deploy to staging'
  name: 'gcr.io/$PROJECT_ID/skaffold:alpha'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    skaffold run -p cloudbuild -l $BUILD_ID -n $$TEST_NAMESPACE -d $$SKAFFOLD_DEFAULT_REPO
  dir: '/workspace/${_DIR}/${_LANG}-${_APP}'
  waitFor: ['create namespace']

- id: 'get endpoint'
  name: 'gcr.io/cloud-builders/kubectl'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if [ "${_APP}" = "hello-world" ]
    then
        if [ "${_LANG}" = "nodejs" ]
          then
          # set nodejs service to use node prefix
          service=node-${_APP}-external
        else
          service=$$HELLO_WORLD_SERVICE
        fi
    fi
    if [ "${_APP}" = "guestbook" ]
    then
        if [ "${_LANG}" = "nodejs" ]
          then
          # set nodejs service to use node prefix
          service=node-${_APP}-frontend
        elif [ "${_LANG}" = go ]
          then
          # set go service to use no prefix
          service=${_APP}-frontend
        else
          service=$$GUESTBOOK_SERVICE
        fi
    fi
    echo 'service is' $service
    get_externalIP() {
      kubectl get service $service --namespace $$TEST_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
    }
    # TODO: set timeout for function or for step
    until [[ -n "$(get_externalIP)" ]]; do
      echo "querying for external ip $service"
      sleep 3
    done

    echo "$(get_externalIP)" > _externalIP
    echo "external IP for $service is $(cat _externalIP)"
  waitFor: ['deploy to staging']

- id: 'integration tests'
  name: 'gcr.io/cloud-builders/curl'
  entrypoint: '/bin/bash'
  args:
  - '-c'
  - |
    if [ "${_APP}" = "hello-world" ]
    then
        keyword='Hello'
    fi
    if [ "${_APP}" = "guestbook" ]
    then
        keyword='Guestbook'
    fi
    # TODO: dotnet (404) and go (405) guestbook currently fails connection but passes content
    # TODO: refactor these tests, step should fail if either fail
    ./test_connection.sh -r 20 -i 3 -u http://$(cat _externalIP)
    ./test_content.sh -r 20 -i 3 -u http://$(cat _externalIP) -k $keyword 
  waitFor: ['get endpoint']

- id: 'delete namespaces'
  name: 'gcr.io/cloud-builders/kubectl'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    kubectl delete namespace $$TEST_NAMESPACE
  waitFor: ['integration tests']

options:
    env:
    - CLOUDSDK_COMPUTE_ZONE=us-central1-a
    - CLOUDSDK_CONTAINER_CLUSTER=staging
    - SKAFFOLD_DEFAULT_REPO=gcr.io/$PROJECT_ID
    - TEST_NAMESPACE=test-$BUILD_ID-$_LANG-$_APP
    - HELLO_WORLD_SERVICE=${_LANG}-${_APP}-external
    - GUESTBOOK_SERVICE=${_LANG}-${_APP}-frontend
